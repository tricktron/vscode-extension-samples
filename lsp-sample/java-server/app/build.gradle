/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.0/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.0-jre'

    implementation group: 'org.eclipse.lsp4j', name: 'org.eclipse.lsp4j', version: '0.12.0'

    implementation files('libs/frege3.25.84.jar')

}

application {
    // Define the main class for the application.
    mainClass = 'ch.fhnw.thga.App'
    applicationName = 'simpleJavaLanguageServer'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

abstract class FregeTask extends JavaExec {
    @CompileClasspath
    abstract Property<FileCollection> getFregeCompiler()

    @InputDirectory
    abstract DirectoryProperty getFregeMainSourceDir()

    @InputDirectory
    abstract DirectoryProperty getJavaMainSourceDir()

    @OutputDirectory
    abstract DirectoryProperty getFregeOutputDir()
}

tasks.register('compileFrege', FregeTask) {
    fregeCompiler = layout.projectDirectory.files('libs/frege3.25.84.jar')
    fregeMainSourceDir = layout.projectDirectory.dir('src/main/frege')
    javaMainSourceDir = layout.projectDirectory.dir('src/main/java')
    fregeOutputDir = layout.buildDirectory.dir('classes/frege/main')
    classpath = files fregeCompiler
    args(["-v", "-d", "${fregeOutputDir.get()}", "-sp", "${fregeMainSourceDir.get()}", "${fregeMainSourceDir.get()}"])
    doLast {
        ant.move(toDir: javaMainSourceDir.get()) {
            fileSet(dir: fregeOutputDir.get()) {
                include name: "**/*.java"
            }
        }
    }
    description "Compiles the frege files in \$fregeMainSourceDir to .java & .class files in \$fregeOutputDir and moves the .java files to \$javaMainSourceDir"
    group 'Frege'
}

compileJava.configure {
    dependsOn compileFrege
}